package org.scalaquery.ql

import scala.annotation.implicitNotFound
import org.scalaquery.util.{Node, ValueLinearizer, ProductLinearizer, WithOp}

/**
 * A type class that encodes the unpacking `Packed => Unpacked` of a
 * `Query[Packed]` to its result element type `Unpacked`.
 *
 * At run-time, it provides the reification, `ValueLinearizer` of the
 * `Unpacked` type.
 *
 * =Example:=
 * - Packed: (Column[Int], Column[(Int, String)], (Int, Option[Double]))
 * - Unpacked: (Int, (Int, String), (Int, Option[Double]))
 * - Reified: (Column[Int], Column[(Int, String)], (Column[Int], Column[Option[Double]]))
 * - Linearized: (Int, Int, String, Int, Option[Double])
 */
@implicitNotFound(msg = "Don't know how to unpack ${r"${P}"} to ${r"${U}"}")
sealed trait Unpack[-P,U] {
  type Packed   = P @annotation.unchecked.uncheckedVariance
  type Unpacked = U
  
  // must return the reified type
  def reify(from: Packed): Any = from
  
  // must return an Unpack for the reified type
  def reifiedUnpack: Unpack[_, Unpacked] = this
  
  def linearizer(from: Packed): ValueLinearizer[_]
  
  def mapOp(x: Packed, f: Node => Node): Any // really returns x.type
}

object Unpack extends UnpackLowPriority {
  def unpackValueLinearizer[T <: ValueLinearizer[_] with WithOp, U] = { 
  	new Unpack[T, U] {
    	def linearizer(from: Packed): ValueLinearizer[_] = from
    	def mapOp(from: Packed, f: Node => Node) = from.mapOp(f)
  	}
  }

  @inline implicit final def unpackJoin
  	[T1 <: Table[_], T2 <: Table[_]]: Unpack[Join[T1, T2], (T1, T2)] = {
  	
  	new Unpack[Join[T1, T2], (T1, T2)] {
    	def linearizer(from: Packed): ValueLinearizer[_] = from.left
    	def mapOp(from: Packed, f: Node => Node) = from.mapOp(f)
  	}
  }
  
  @inline implicit final def unpackTable2
  	[T1 <: Table[_], T2 <: Table[_],U1,U2]: Unpack[(T1, T2), (U1, U2)] = {
  	
  	new Unpack[(T1, T2), (U1, U2)] {
    	def linearizer(from: Packed): ValueLinearizer[_] = from match {
      	case (l,r) => l.*
    	}
    	def mapOp(from: Packed, f: Node => Node) = 
    		from.asInstanceOf[WithOp].mapOp(f)
  	}
  }

  def unpackTableBase[T <: TableBase[_]]: Unpack[T, Nothing] = {
  	new Unpack[T, Nothing] {
	    def linearizer(from: Packed): ValueLinearizer[_] = from match {
	      case a: Table[_] => a.*
	      case Join(left,_,_,_) => left.*
	    }
	    def mapOp(from: Packed, f: Node => Node) = from.mapOp(f)
	  }
	}
}

trait UnpackLowPriority extends UnpackLowPriority2 {
  implicit final def unpackColumnBase[T]: Unpack[ColumnBase[T], T] = {
	  new Unpack[ColumnBase[T], T] {
	    def linearizer(from: Packed): ValueLinearizer[_] = from
	    def mapOp(from: Packed, f: Node => Node) = from.mapOp(f)
	  }
	}

  implicit final def unpackPrimitive[T]
  	(implicit tm: TypeMapper[T]): Unpack[T, T] = { 
  	
  	new Unpack[T, T] {
	    override def reify(from: Packed) = ConstColumn(from)
	    override def reifiedUnpack = unpackColumnBase[T]
	    def linearizer(from: Packed): ValueLinearizer[_] = ConstColumn(from)
	    def mapOp(from: Packed, f: Node => Node) = from
	  }
	}
}

trait UnpackLowPriority2 {
<#list 2..22 as i>
  implicit final def unpackTuple${i}[<#list 1..i as j>T${j}<#if i != j>,</#if></#list>, <#list 1..i as j>U${j}<#if i != j>,</#if></#list>, <#list 1..i as j>R${j}<#if i != j>,</#if></#list>](implicit <#list 1..i as j>u${j}: Unpack[T${j}, U${j}]<#if i != j>, </#if></#list>): Unpack[(<#list 1..i as j>T${j}<#if i != j>,</#if></#list>), (<#list 1..i as j>U${j}<#if i != j>,</#if></#list>)] = new Unpack[(<#list 1..i as j>T${j}<#if i != j>,</#if></#list>), (<#list 1..i as j>U${j}<#if i != j>,</#if></#list>)] {
    override def reify(from: Packed) =
      (<#list 1..i as j>u${j}.reify(from._${j})<#if i != j>, </#if></#list>)
    override def reifiedUnpack: Unpack[_, Unpacked] =
      unpackTuple${i}(<#list 1..i as j>u${j}.reifiedUnpack<#if i != j>, </#if></#list>)
    def linearizer(from: Packed) = {
      val sub = Vector(<#list 1..i as j>u${j}.linearizer(from._${j})<#if i != j>, </#if></#list>)
      new ProductLinearizer(sub)
    }
    def mapOp(from: Packed, f: Node => Node) =
      (<#list 1..i as j>u${j}.mapOp(from._${j}, f)<#if i != j>, </#if></#list>)
  }
</#list>
}

/**
 * A type class that encodes the reification `Packed => Reified` of a
 * `Query[Packed]` to a fully packed type `Reified`, i.e. a type where
 * everything which is not a transparent container is wrapped in a `Column[_]`.
 *
 * This needs to be defined in a separate typeclass but in lockstep with Unpack
 * because of limitations of Scala's type inferencer.
 *
 * =Example:=
 * - Packed: (Column[Int], Column[(Int, String)], (Int, Option[Double]))
 * - Reified: (Column[Int], Column[(Int, String)], (Column[Int], Column[Option[Double]]))
 */
@implicitNotFound(msg = "Don't know how to reify ${r"${P}"} to ${r"${R}"}")
sealed trait Reify[-P,R]

object Reify extends ReifyLowPriority {
  implicit final def reifyColumnBase[T <: ColumnBase[_]]: Reify[T, T] = null
}

trait ReifyLowPriority {
  implicit final def reifyPrimitive[T](implicit tm: TypeMapper[T]): Reify[T, ConstColumn[T]] = null

<#list 2..22 as i>
  implicit final def reifyTuple${i}[<#list 1..i as j>T${j}<#if i != j>,</#if></#list>, <#list 1..i as j>U${j}<#if i != j>,</#if></#list>, <#list 1..i as j>R${j}<#if i != j>,</#if></#list>](implicit <#list 1..i as j>u${j}: Reify[T${j}, R${j}]<#if i != j>, </#if></#list>): Reify[(<#list 1..i as j>T${j}<#if i != j>,</#if></#list>), (<#list 1..i as j>R${j}<#if i != j>,</#if></#list>)] = null
</#list>
}
